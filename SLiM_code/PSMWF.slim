initialize() {
	if (exists("slimgui")){ //seed and K need to be set through the shell script 
		defineConstant("seed", 1);
		defineConstant("K", 1000);
	}
	setSeed(seed);
	
	//burn-in sampling
	defineConstant("stg_ss",10000); //sample size for burn-in sampling
	if (K!=100000){
		defineConstant("BurninEnd", K*10); //as suggested by SLiM manual (Haller & Messer 2023)
		defineConstant("stg_gen",K); //number of generations between each burn-in sampling
	}	
	else{ //simulations with K=100'000 are run for less generations due to their computation time
		defineConstant("BurninEnd", K);
		defineConstant("stg_gen",K/10);
	}

	//final pN/pS sampling
	defineConstant("SampleSize", 24); //sample size for final pN/pS sampling
	defineConstant("Replicas", 100); //number of final pN/pS sampling replicas

	//genomic parameters
	defineConstant("g", 1000); //total gene number
	defineConstant("geneLength", 2400); //model gene length set according to average gene coding portion length measured across emperor penguin reference genome (ASM69914v1, Zhang G. et al 2014)
	defineConstant("genomeLength", 2.4e6); //resulting genome length
	initializeMutationRate(1e-8); //a more realistic mutation rate (4.6e-9 measured through direct estimation on Ficedula albicollis germinal line, Smeds et al 2016) has been tested but it resulted in a too low number of mutations per gene leading to most of gene pN/pS being equal to 0/0 pN/0 0/pS
	initializeMutationType("m3", 0.0, "f", 0.0).convertToSubstitution=T; //neutral mutations
	//deleterious mutations selection coefficients are drawn from a gamma distribution estimated on human polymorphisms data (Kim et al 2017), while dominance coefficients are drawn from the hmix model (strongly deleterious mutations are fully recessive while weakly deleterious ones have h=0.25, Kyriazis et al 2020)
	initializeMutationType("m1", 0.0, "s", "do{x=rgamma(1,-0.01314833,0.186);}while(x>=(-0.01)); return(x);").convertToSubstitution=T; //strong deleterious mutations (s<-0.01)
	initializeMutationType("m2", 0.25, "s", "do{x=rgamma(1,-0.01314833,0.186);}while(x<(-0.01)); return(x);").convertToSubstitution=T; //weak deleterious mutations (s>=-0.01)
	initializeGenomicElementType("g1", c(m1,m2,m3), c(0.61,1.70,1.0)); //deleterious to neutral mutations ratio is set at 2.31:1.0 (Kim et al 2017, Kyriazis et al 2020), while strong to weak deleterious mutations ratio is estimated from the gamma distribution used to draw deleterious selection coefficients (Kim et al 2017) and it results in 0.262:0.738
	for (i in 1:g){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2));
	}
	rates=c(rep(c(1e-8,4.8e-4), g-1),1e-8); //recombination rate is set at 1e-8 within genes and at 4.8e-4 between genes since 1e-8 has been scaled to average emperor penguin intergene length
	ends=NULL;
	for (i in 1:(g-1)){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=c(ends,(g*geneLength)+(g-2));
	initializeRecombinationRate(rates, ends);
}


function (float)calcIndividualMutationNumber(object<Individual> individuals) //function to measure individual number of mutations
{
	totmuts=NULL;
	neutmuts=NULL;
	delmuts=NULL;
	m01muts=NULL;
	m001muts=NULL;
	m0001muts=NULL;
	m00001muts=NULL;
	tothommuts=NULL;
	neuthommuts=NULL;
	delhommuts=NULL;
	m01hommuts=NULL;
	m001hommuts=NULL;
	m0001hommuts=NULL;
	m00001hommuts=NULL;
	tothetmuts=NULL;
	neuthetmuts=NULL;
	delhetmuts=NULL;
	m01hetmuts=NULL;
	m001hetmuts=NULL;
	m0001hetmuts=NULL;
	m00001hetmuts=NULL;
	counter=0;
	for (ind in individuals){
		indgenomes=ind.genomes;
		indtotmuts=unique(indgenomes.mutations);
		indneutmuts=indtotmuts[indtotmuts.selectionCoeff==0.0];
		inddelmuts=indtotmuts[indtotmuts.selectionCoeff<0.0];
		indm01muts=inddelmuts[inddelmuts.selectionCoeff<=-0.1];
		a=inddelmuts[inddelmuts.selectionCoeff>-0.1];
		indm001muts=a[a.selectionCoeff<=-0.01];
		b=a[a.selectionCoeff>-0.01];
		indm0001muts=b[b.selectionCoeff<=-0.001];
		indm00001muts=b[b.selectionCoeff>-0.001];
		indtothommuts=indtotmuts[indgenomes.mutationFrequenciesInGenomes(indtotmuts)==1.0];
		indneuthommuts=indneutmuts[indgenomes.mutationFrequenciesInGenomes(indneutmuts)==1.0];
		inddelhommuts=inddelmuts[indgenomes.mutationFrequenciesInGenomes(inddelmuts)==1.0];
		indm01hommuts=indm01muts[indgenomes.mutationFrequenciesInGenomes(indm01muts)==1.0];
		indm001hommuts=indm001muts[indgenomes.mutationFrequenciesInGenomes(indm001muts)==1.0];
		indm0001hommuts=indm0001muts[indgenomes.mutationFrequenciesInGenomes(indm0001muts)==1.0];
		indm00001hommuts=indm00001muts[indgenomes.mutationFrequenciesInGenomes(indm00001muts)==1.0];
		totmuts=c(totmuts,size(indtotmuts));
		neutmuts=c(neutmuts,size(indneutmuts));
		delmuts=c(delmuts,size(inddelmuts));
		m01muts=c(m01muts,size(indm01muts));
		m001muts=c(m001muts,size(indm001muts));
		m0001muts=c(m0001muts,size(indm0001muts));
		m00001muts=c(m00001muts,size(indm00001muts));
		tothommuts=c(tothommuts,size(indtothommuts));
		neuthommuts=c(neuthommuts,size(indneuthommuts));
		delhommuts=c(delhommuts,size(inddelhommuts));
		m01hommuts=c(m01hommuts,size(indm01hommuts));
		m001hommuts=c(m001hommuts,size(indm001hommuts));
		m0001hommuts=c(m0001hommuts,size(indm0001hommuts));
		m00001hommuts=c(m00001hommuts,size(indm00001hommuts));
		tothetmuts=c(tothetmuts,totmuts[counter]-tothommuts[counter]);
		neuthetmuts=c(neuthetmuts,neutmuts[counter]-neuthommuts[counter]);
		delhetmuts=c(delhetmuts,delmuts[counter]-delhommuts[counter]);
		m01hetmuts=c(m01hetmuts,m01muts[counter]-m01hommuts[counter]);
		m001hetmuts=c(m001hetmuts,m001muts[counter]-m001hommuts[counter]);
		m0001hetmuts=c(m0001hetmuts,m0001muts[counter]-m0001hommuts[counter]);
		m00001hetmuts=c(m00001hetmuts,m00001muts[counter]-m00001hommuts[counter]);
		counter=counter+1;
	}
	return c(mean(totmuts),mean(neutmuts),mean(delmuts),mean(m01muts),mean(m001muts),mean(m0001muts),mean(m00001muts),mean(tothommuts),mean(neuthommuts),mean(delhommuts),mean(m01hommuts),mean(m001hommuts),mean(m0001hommuts),mean(m00001hommuts),mean(tothetmuts),mean(neuthetmuts),mean(delhetmuts),mean(m01hetmuts),mean(m001hetmuts),mean(m0001hetmuts),mean(m00001hetmuts));
}


1 early() {
	sim.addSubpop(1, K);
	writeFile('PSMWF_K' + K + '_seed' + getSeed() + '_stg.csv',"Gen,totmuts,neutmuts,delmuts,m01muts,m001muts,m0001muts,m00001muts,indtotmuts,indneutmuts,inddelmuts,indm01muts,indm001muts,indm0001muts,indm00001muts,indtothommuts,indneuthommuts,inddelhommuts,indm01hommuts,indm001hommuts,indm0001hommuts,indm00001hommuts,indtothetmuts,indneuthetmuts,inddelhetmuts,indm01hetmuts,indm001hetmuts,indm0001hetmuts,indm00001hetmuts");
}

1:100000 late(){
	//burn-in sampling
	if (sim.cycle%stg_gen==0){
		AllInds=p1.individuals;
		if (stg_ss<size(AllInds)){
			samp=sample(AllInds,stg_ss);
			gen=samp.genomes;
			totmuts=unique(gen.mutations);
			neutmuts=totmuts[totmuts.selectionCoeff==0.0];
			delmuts=totmuts[totmuts.selectionCoeff<0.0];
			m01muts=delmuts[delmuts.selectionCoeff<=-0.1];
			a=delmuts[delmuts.selectionCoeff>-0.1];
			m001muts=a[a.selectionCoeff<=-0.01];
			b=a[a.selectionCoeff>-0.01];
			m0001muts=b[b.selectionCoeff<=-0.001];
			m00001muts=b[b.selectionCoeff>-0.001];
			indmuts=calcIndividualMutationNumber(samp);
			writeFile('PSMWF_K' + K + '_seed' + getSeed() + '_stg.csv',sim.cycle + ',' + size(totmuts) + ',' + size(neutmuts) + ',' + size(delmuts) + ',' + size(m01muts) + ',' + size(m001muts) + ',' + size(m0001muts) + ',' + size(m00001muts) + ',' + indmuts[0] + ',' + indmuts[1] + ',' + indmuts[2] + ',' + indmuts[3] + ',' + indmuts[4] + ',' + indmuts[5] + ',' + indmuts[6] + ',' + indmuts[7] + ',' + indmuts[8] + ',' + indmuts[9] + ',' + indmuts[10] + ',' + indmuts[11] + ',' + indmuts[12] + ',' + indmuts[13] + ',' + indmuts[14] + ',' + indmuts[15] + ',' + indmuts[16] + ',' + indmuts[17] + ',' + indmuts[18] + ',' + indmuts[19] + ',' + indmuts[20],T);
		}
		else{
			gen=AllInds.genomes;
			totmuts=unique(gen.mutations);
			neutmuts=totmuts[totmuts.selectionCoeff==0.0];
			delmuts=totmuts[totmuts.selectionCoeff<0.0];
			m01muts=delmuts[delmuts.selectionCoeff<=-0.1];
			a=delmuts[delmuts.selectionCoeff>-0.1];
			m001muts=a[a.selectionCoeff<=-0.01];
			b=a[a.selectionCoeff>-0.01];
			m0001muts=b[b.selectionCoeff<=-0.001];
			m00001muts=b[b.selectionCoeff>-0.001];
			indmuts=calcIndividualMutationNumber(AllInds);
			writeFile('PSMWF_K' + K + '_seed' + getSeed() + '_stg.csv',sim.cycle + ',' + size(totmuts) + ',' + size(neutmuts) + ',' + size(delmuts) + ',' + size(m01muts) + ',' + size(m001muts) + ',' + size(m0001muts) + ',' + size(m00001muts) + ',' + indmuts[0] + ',' + indmuts[1] + ',' + indmuts[2] + ',' + indmuts[3] + ',' + indmuts[4] + ',' + indmuts[5] + ',' + indmuts[6] + ',' + indmuts[7] + ',' + indmuts[8] + ',' + indmuts[9] + ',' + indmuts[10] + ',' + indmuts[11] + ',' + indmuts[12] + ',' + indmuts[13] + ',' + indmuts[14] + ',' + indmuts[15] + ',' + indmuts[16] + ',' + indmuts[17] + ',' + indmuts[18] + ',' + indmuts[19] + ',' + indmuts[20],T);		
		}
	}		
	
	if (sim.cycle==BurninEnd){
		sim.outputFull("PSMWF_K" + K + '_seed' + getSeed() + "_gen" + sim.cycle + "_oF"); //checkpoint: print outputFull file at the end of the burn-in 

		//final pN/pS sampling: note that two kind of nonsyn/syn measurements are carried out, pnps=pN/pS pnps_alt=(pN-pS)/(pN+pS)
		writeFile("PSMWF_K" + K + '_seed' + getSeed() + ".csv","neutmuts,delmuts,highdelmuts,moddelmuts,wkdelmuts,pnps,pnps_alt");
		for (i in 1:Replicas){
			samp=p1.sampleIndividuals(SampleSize);
			muts=unique(samp.genomes.mutations);
			muts=muts[samp.genomes.mutationFrequenciesInGenomes(muts)<1.0]; //exclude mutations that are fixed within the sample
			neutmuts=muts[muts.selectionCoeff==0.0];
			delmuts=muts[muts.selectionCoeff<0.0];
			highdelmuts=delmuts[delmuts.selectionCoeff<(-0.01)];
			x=delmuts[delmuts.selectionCoeff>=(-0.01)];
			moddelmuts=x[x.selectionCoeff<(-0.0001)];
			wkdelmuts=x[x.selectionCoeff>=(-0.0001)];
			writeFile("PSMWF_K" + K + '_seed' + getSeed() + ".csv",size(neutmuts) + ',' + size(delmuts) + ',' + size(highdelmuts) + ',' + size(moddelmuts) + ',' + size(wkdelmuts) + ',' + size(delmuts)/size(neutmuts) + ',' + (size(delmuts)-size(neutmuts))/(size(delmuts)+size(neutmuts)),T);
		}
		sim.simulationFinished();
	}
}